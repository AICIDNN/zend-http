{"name":"Zend-http","tagline":"Http component from Zend Framework","body":"# zend-http\r\n\r\n\r\n`Zend\\Http` is a primary foundational component of Zend Framework. Since much of\r\nwhat PHP does is web-based, specifically HTTP, it makes sense to have a performant,\r\nextensible, concise and consistent API to do all things HTTP.\r\n\r\n\r\nCONTRIBUTING\r\nRESOURCES\r\n\r\nIf you wish to contribute to Zend Framework, please be sure to read/subscribe to the following resources:\r\n\r\nCoding Standards\r\nContributor's Guide\r\nZF Contributor's mailing list: Archives: http://zend-framework-community.634137.n4.nabble.com/ZF-Contributor-f680267.html Subscribe: zf-contributors-subscribe@lists.zend.com\r\nZF Contributor's IRC channel: #zftalk.dev on Freenode.net\r\nIf you are working on new features or refactoring create a proposal.\r\n\r\nReporting Potential Security Issues\r\n\r\nIf you have encountered a potential security vulnerability, please DO NOT report it on the public issue tracker: send it to us at zf-security@zend.com instead. We will work with you to verify the vulnerability and patch it as soon as possible.\r\n\r\nWhen reporting issues, please provide the following information:\r\n\r\nComponent(s) affected\r\nA description indicating how to reproduce the issue\r\nA summary of the security vulnerability and impact\r\nWe request that you contact us via the email address above and give the project contributors a chance to resolve the vulnerability and issue a new release prior to any public exposure; this helps protect users and provides them with a chance to upgrade and/or update in order to protect their applications.\r\n\r\nFor sensitive email communications, please use our PGP key.\r\n\r\nRUNNING TESTS\r\n\r\nNote: testing versions prior to 2.4\r\n\r\nThis component originates with Zend Framework 2. During the lifetime of ZF2, testing infrastructure migrated from PHPUnit 3 to PHPUnit 4. In most cases, no changes were necessary. However, due to the migration, tests may not run on versions < 2.4. As such, you may need to change the PHPUnit dependency if attempting a fix on such a version.\r\nTo run tests:\r\n\r\nClone the repository:\r\n\r\n$ git clone git@github.com:zendframework/zend-http.git\r\n$ cd\r\nInstall dependencies via composer:\r\n\r\n$ curl -sS https://getcomposer.org/installer | php --\r\n$ ./composer.phar install\r\nIf you don't have curl installed, you can also download composer.phar from https://getcomposer.org/\r\n\r\nRun the tests via phpunit and the provided PHPUnit config, like in this example:\r\n\r\n$ ./vendor/bin/phpunit\r\nYou can turn on conditional tests with the phpunit.xml file. To do so:\r\n\r\nCopy phpunit.xml.dist file to phpunit.xml\r\nEdit phpunit.xml to enable any specific functionality you want to test, as well as to provide test values to utilize.\r\nRunning Coding Standards Checks\r\n\r\nThis component uses php-cs-fixer for coding standards checks, and provides configuration for our selected checks. php-cs-fixer is installed by default via Composer.\r\n\r\nTo run checks only:\r\n\r\n$ ./vendor/bin/php-cs-fixer fix . -v --diff --dry-run --config-file=.php_cs\r\nTo have php-cs-fixer attempt to fix problems for you, omit the --dry-run flag:\r\n\r\n$ ./vendor/bin/php-cs-fixer fix . -v --diff --config-file=.php_cs\r\nIf you allow php-cs-fixer to fix CS issues, please re-run the tests to ensure they pass, and make sure you add and commit the changes after verification.\r\n\r\nRecommended Workflow for Contributions\r\n\r\nYour first step is to establish a public repository from which we can pull your work into the master repository. We recommend using GitHub, as that is where the component is already hosted.\r\n\r\nSetup a GitHub account, if you haven't yet\r\nFork the repository (http://github.com/zendframework/zend-http)\r\nClone the canonical repository locally and enter it.\r\n\r\n$ git clone git://github.com:zendframework/zend-http.git\r\n$ cd zend-http\r\nAdd a remote to your fork; substitute your GitHub username in the command below.\r\n\r\n$ git remote add {username} git@github.com:{username}/zend-http.git\r\n$ git fetch {username}\r\nKeeping Up-to-Date\r\n\r\nPeriodically, you should update your fork or personal repository to match the canonical ZF repository. Assuming you have setup your local repository per the instructions above, you can do the following:\r\n\r\n$ git checkout master\r\n$ git fetch origin\r\n$ git rebase origin/master\r\n# OPTIONALLY, to keep your remote up-to-date -\r\n$ git push {username} master:master\r\nIf you're tracking other branches -- for example, the \"develop\" branch, where new feature development occurs -- you'll want to do the same operations for that branch; simply substitute \"develop\" for \"master\".\r\n\r\nWorking on a patch\r\n\r\nWe recommend you do each new feature or bugfix in a new branch. This simplifies the task of code review as well as the task of merging your changes into the canonical repository.\r\n\r\nA typical workflow will then consist of the following:\r\n\r\nCreate a new local branch based off either your master or develop branch.\r\nSwitch to your new local branch. (This step can be combined with the previous step with the use of git checkout -b.)\r\nDo some work, commit, repeat as necessary.\r\nPush the local branch to your remote repository.\r\nSend a pull request.\r\nThe mechanics of this process are actually quite trivial. Below, we will create a branch for fixing an issue in the tracker.\r\n\r\n$ git checkout -b hotfix/9295\r\nSwitched to a new branch 'hotfix/9295'\r\n... do some work ...\r\n\r\n$ git commit\r\n... write your log message ...\r\n\r\n$ git push {username} hotfix/9295:hotfix/9295\r\nCounting objects: 38, done.\r\nDelta compression using up to 2 threads.\r\nCompression objects: 100% (18/18), done.\r\nWriting objects: 100% (20/20), 8.19KiB, done.\r\nTotal 20 (delta 12), reused 0 (delta 0)\r\nTo ssh://git@github.com/{username}/zend-http.git\r\n   b5583aa..4f51698  HEAD -> master\r\nTo send a pull request, you have two options.\r\n\r\nIf using GitHub, you can do the pull request from there. Navigate to your repository, select the branch you just created, and then select the \"Pull Request\" button in the upper right. Select the user/organization \"zendframework\" as the recipient.\r\n\r\nIf using your own repository - or even if using GitHub - you can use git format-patch to create a patchset for us to apply; in fact, this is recommended for security-related patches. If you use format-patch, please send the patches as attachments to:\r\n\r\nzf-devteam@zend.com for patches without security implications\r\nzf-security@zend.com for security patches\r\nWhat branch to issue the pull request against?\r\n\r\nWhich branch should you issue a pull request against?\r\n\r\nFor fixes against the stable release, issue the pull request against the \"master\" branch.\r\nFor new features, or fixes that introduce new elements to the public API (such as new public methods or properties), issue the pull request against the \"develop\" branch.\r\nBranch Cleanup\r\n\r\nAs you might imagine, if you are a frequent contributor, you'll start to get a ton of branches both locally and on your remote.\r\n\r\nOnce you know that your changes have been accepted to the master repository, we suggest doing some cleanup of these branches.\r\n\r\nLocal branch cleanup\r\n\r\n$ git branch -d <branchname>\r\nRemote branch removal\r\n\r\n$ git push {username} :<branchname>\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}